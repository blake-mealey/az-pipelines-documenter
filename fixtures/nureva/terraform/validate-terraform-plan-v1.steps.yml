# Validates the given terraform plan file for deleted resources. Throws an error if succeedOnDestroy
# is false and there are resource to be deleted in the plan.

parameters:
  - name: terraformPlanFilePath
    displayName: Terraform Plan File Path
    type: string
  - name: succeedOnDestroy
    displayName: Succeed On Destroy
    type: boolean
    default: false
  - name: workingDirectory
    displayName: Working Directory
    type: string
    default: $(Pipeline.Workspace)

steps:
  - pwsh: |
      function Get-ObjectPropertiesByName() {
        Param(
          [Parameter(Mandatory = $True)]
          [PSCustomObject] $Object,
          [Parameter(Mandatory = $True)]
          [string] $SearchName
        )

        $MatchedObjects = @()
        If ($Object.GetType().ToString() -eq 'System.Management.Automation.PSCustomObject') {
          ForEach ($Property in $Object.PSObject.Properties) {
            If ($Property.Name -eq $SearchName) {
              Return $Property.Value
            }
            ElseIf ($Property.TypeNameOfValue -eq "System.Management.Automation.PSCustomObject" -or $Property.TypeNameOfValue -eq "System.Object[]" ) {
              $MatchedObject = Get-ObjectPropertiesByName -Object $Property.Value -SearchName $SearchName
              If ($MatchedObject) {
                $MatchedObjects += $MatchedObject
              }
            }
          }
        }
        ElseIf ($Object.GetType().ToString() -eq "System.Object[]") {
          Foreach ($Item in $Object) {
            If ($Item.GetType().ToString() -eq "System.Management.Automation.PSCustomObject" -or $Item.GetType().ToString() -eq "System.Object[]" ) {
              $MatchedObject = Get-ObjectPropertiesByName -Object $Item -SearchName $SearchName
              If ($MatchedObject) {
                $MatchedObjects += $MatchedObject
              }
            }
          }
        }

        Return $MatchedObjects
      }

      #------------------------------------------------------------------------------
      # Main Execution
      #------------------------------------------------------------------------------

      # Verify file
      if( !(Test-Path -Path ${{ parameters.terraformPlanFilePath }})){
        Throw "Unable to locate file '${{ parameters.terraformPlanFilePath }}'. Please check the file exists and try again"
      }

      # Get plan as powershell object
      try{

        $TerraformShowCommand = "terraform show -json ${{ parameters.terraformPlanFilePath }}"
        $TerraformPlan = Invoke-Expression $TerraformShowCommand | ConvertFrom-Json

        if( !($TerraformPlan) ){
          Throw "Unable to parse terraform plan. Please ensure provied plan file is not empty"
        }
      }
      catch{
        Throw "Unable to parse terraform plan. Please ensure terraform CLI is installed and try again"
      }

      # Extract all plan actions
      $Actions = Get-ObjectPropertiesByName -Object $TerraformPlan -SearchName "actions"

      # Assume there is a remove so the script has to 'prove' there is not
      $ActionRemoveCount = 1
      $ActionNoOpCount = ($Actions | Where-Object{$_ -eq "no-op"} | Measure-Object).Count
      $ActionCreateCount =($Actions | Where-Object{$_ -eq "create"} | Measure-Object).Count
      $ActionUpdateCount = ($Actions | Where-Object{$_ -eq "update"} | Measure-Object).Count
      $ActionRemoveCount = ($Actions | Where-Object{$_ -eq "delete"} | Measure-Object).Count

      # Ensure there are some actions, if there are not there is probably a mistake
      if( ($ActionNoOpCount -eq 0) -and ($ActionCreateCount -eq 0) -and ($ActionUpdateCount -eq 0) -and ($ActionRemoveCount -eq 0)){
        Throw "No actions detected in the terraform plan file"
      }

      Write-Host "Parsed Terraform Plan file.`n`t'$ActionNoOpCount' No-Ops`n`t'$ActionCreateCount' Creates`n`t'$ActionUpdateCount' Updates`n`t'$ActionRemoveCount' Removes"

      if(($ActionRemoveCount -gt 0) -and ($${{ parameters.succeedOnDestroy }} -eq $false)){
        Throw "Script detected removals in the terraform plan but the 'SucceedOnDestroy' variable is false. Stopping release"
      }

      if(($ActionRemoveCount -gt 0) -and ($${{ parameters.succeedOnDestroy }} -eq $true)){
        Write-Warning "Script detected removals in the terraform plan but the 'SucceedOnDestroy' variable is true, continuing with release..."
      }
    displayName: Validate Terraform Plan
    failOnStderr: true
    workingDirectory: ${{ parameters.workingDirectory }}
